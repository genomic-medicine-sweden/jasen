/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    JASEN Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

workDir = "" //edit by providing "/filepath/to/workdir"

params {

    // Boilerplate options //

    root                    = "" //edit by providing "/filepath/to/jasen"
    outdir                  = "" //edit by providing "/filepath/to/outdir"
    tracedir                = "${params.outdir}/pipeline_info"
    scratch                 = true
    publish_dir             = null
    publish_dir_mode        = 'copy'
    publish_dir_overwrite   = false
    containers_dir          = "${root}/containers"
    symlink_dir             = null
    platform                = null
    args                    = null
    prefix                  = null
    species_dir             = null
    bam_dir                 = "bam"
    cdm_dir                 = "cdm_input"
    vcf_dir                 = "vcf"
    ci                      = false
    ci_cpus_max             = null
    ci_mem_max              = null

    // Databases //

    amrfinder_db            = "${root}/assets/amrfinder_db/latest"
    resfinder_db            = "${root}/assets/resfinder_db"
    pointfinder_db          = "${root}/assets/pointfinder_db"
    serotypefinder_db       = "${root}/assets/serotypefinder_db"
    shigapass_db            = "${root}/assets/ShigaPass/SCRIPT/ShigaPass_DataBases"
    virulencefinder_db      = "${root}/assets/virulencefinder_db"
    mlst_blast_db           = "${root}/assets/mlst_db/blast"
    pubmlst_db              = "${root}/assets/mlst_db/pubmlst"
    hostile_idx             = "${root}/assets/hostile_db/human-t2t-hla"
    kraken_db               = "" //edit by providing "/filepath/to/kraken_db" if use_kraken = true

    // Pipeline options //

    executor                = "" //edit
    queue                   = "" //edit
    offline                 = true
    dev_mode                = false
    copy_to_cron            = false
    use_hostile             = false
    use_kraken              = false
    use_skesa               = true // To use spades set useSkesa = false

    // Resource profiles

    cpus_tiny               = 2
    cpus_small              = 4
    cpus_medium             = 8
    cpus_large              = 16
    cpus_huge               = 32
    cpus_max                = 64
    mem_tiny                = '4.GB'
    mem_small               = '8.GB'
    mem_medium              = '16.GB'
    mem_large               = '32.GB'
    mem_huge                = '64.GB'
    mem_max                 = '128.GB'
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Include additional CMD profiles
includeConfig 'conf/cmd.config'

profiles {
    ci {
        params.ci                   = true
        params.ci_cpus_max          = 4
        params.ci_mem_max           = '12.GB'
    }

    illumina {
        params.platform             = "illumina"
        params.idx_ext              = "fai"
    }

    nanopore {
        params.platform             = "nanopore"
        params.idx_ext              = "mmi"
    }

    iontorrent {
        params.platform             = "iontorrent"
    }

    staphylococcus_aureus {
        params.species              = "staphylococcus aureus"
        params.species_dir          = 'saureus'
        params.mlst_scheme          = 'saureus'
        params.reference_genome     = "${params.root}/assets/genomes/staphylococcus_aureus/GCF_000012045.1.fasta"
        params.reference_genome_idx = "${params.root}/assets/genomes/staphylococcus_aureus/GCF_000012045.1.fasta.${params.idx_ext}"
        params.reference_genome_gff = "${params.root}/assets/genomes/staphylococcus_aureus/GCF_000012045.1.gff"
        params.chewbbaca_db         = "${params.root}/assets/cgmlst/staphylococcus_aureus/alleles_rereffed"
        params.core_loci_bed        = "${params.root}/assets/cgmlst/staphylococcus_aureus/bed/GCF_000012045.1.bed"
        params.training_file        = "${params.root}/assets/cgmlst/staphylococcus_aureus/alleles_rereffed/Staphylococcus_aureus.trn"
        params.use_virulence_dbs    = ['s.aureus_hostimm', 's.aureus_exoenzyme', 's.aureus_toxin']
        params.use_serotype_dbs     = []
        params.target_sample_size   = null
    }

    escherichia_coli {
        params.species              = 'escherichia coli'
        params.species_dir          = 'ecoli'
        params.mlst_scheme          = 'ecoli_achtman_4'
        params.reference_genome     = "${params.root}/assets/genomes/escherichia_coli/GCF_000005845.2.fasta"
        params.reference_genome_idx = "${params.root}/assets/genomes/escherichia_coli/GCF_000005845.2.fasta.${params.idx_ext}"
        params.reference_genome_gff = "${params.root}/assets/genomes/escherichia_coli/GCF_000005845.2.gff"
        // params.chewbbaca_db      = "${params.root}/assets/cgmlst/escherichia_coli/alleles_rereffed"
        // params.core_loci_bed     = "${params.root}/assets/cgmlst/escherichia_coli/bed/GCF_000005845.2.bed"
        // params.training_file     = "${params.root}/assets/cgmlst/escherichia_coli/alleles_rereffed/Escherichia_coli.trn"
        params.chewbbaca_db         = "${params.root}/assets/wgmlst/escherichia_coli/alleles/ecoli_INNUENDO_wgMLST"
        params.core_loci_bed        = "${params.root}/assets/wgmlst/escherichia_coli/bed/GCF_000005845.2.bed"
        params.training_file        = "${params.root}/assets/wgmlst/escherichia_coli/alleles/ecoli_INNUENDO_wgMLST/Escherichia_coli.trn"
        params.use_virulence_dbs    = ['virulence_ecoli', 'stx']
        params.use_serotype_dbs     = ['O_type', 'H_type']
        params.target_sample_size   = null
    }

    klebsiella_pneumoniae {
        params.species              = 'klebsiella pneumoniae'
        params.species_dir          = 'kpneumoniae'
        params.mlst_scheme          = 'klebsiella'
        params.reference_genome     = "${params.root}/assets/genomes/klebsiella_pneumoniae/GCF_000240185.1.fasta"
        params.reference_genome_idx = "${params.root}/assets/genomes/klebsiella_pneumoniae/GCF_000240185.1.fasta.${params.idx_ext}"
        params.reference_genome_gff = "${params.root}/assets/genomes/klebsiella_pneumoniae/GCF_000240185.1.gff"
        params.chewbbaca_db         = "${params.root}/assets/cgmlst/klebsiella_pneumoniae/alleles_rereffed"
        params.core_loci_bed        = "${params.root}/assets/cgmlst/klebsiella_pneumoniae/bed/GCF_000240185.1.bed"
        params.training_file        = "${params.root}/assets/cgmlst/klebsiella_pneumoniae/alleles_rereffed/Klebsiella_pneumoniae.trn"
        params.use_virulence_dbs    = []
        params.use_serotype_dbs     = []
        params.target_sample_size   = null
    }

    mycobacterium_tuberculosis {
        params.species              = 'mycobacterium tuberculosis'
        params.species_dir          = 'mtuberculosis'
        params.resistant_loci_name  = 'resistance_loci'
        params.grading_loci_name    = 'grading_loci'
        params.reference_genome     = "${params.root}/assets/genomes/mycobacterium_tuberculosis/GCF_000195955.2.fasta"
        params.reference_genome_idx = "${params.root}/assets/genomes/mycobacterium_tuberculosis/GCF_000195955.2.fasta.${params.idx_ext}"
        params.reference_genome_gff = "${params.root}/assets/genomes/mycobacterium_tuberculosis/GCF_000195955.2.gff"
        params.core_loci_bed        = "${params.root}/assets/cgmlst/mycobacterium_tuberculosis/bed/GCF_000195955.2.bed"
        params.tb_grading_rules_bed = "${params.root}/assets/tb_info/bed/tb_grading_rules.bed"
        params.tbdb_bed             = "${params.root}/assets/tbdb/converged_who_fohm_tbdb.bed.gz"
        params.tbdb_bed_idx         = "${params.tbdb_bed}.tbi"
        params.target_sample_size   = null
    }

    streptococcus_pyogenes {
        params.species              = 'streptococcus pyogenes'
        params.species_dir          = 'spyogenes'
        params.mlst_scheme          = 'spyogenes'
        params.reference_genome     = "${params.root}/assets/genomes/streptococcus_pyogenes/GCF_005164585.1.fasta"
        params.reference_genome_idx = "${params.root}/assets/genomes/streptococcus_pyogenes/GCF_005164585.1.fasta.${params.idx_ext}"
        params.reference_genome_gff = "${params.root}/assets/genomes/streptococcus_pyogenes/GCF_005164585.1.gff"
        params.chewbbaca_db         = "${params.root}/assets/cgmlst/streptococcus_pyogenes/alleles_rereffed"
        params.core_loci_bed        = "${params.root}/assets/cgmlst/streptococcus_pyogenes/bed/GCF_005164585.1.bed"
        params.training_file        = "${params.root}/assets/cgmlst/streptococcus_pyogenes/alleles_rereffed/Streptococcus_pyogenes.trn"
        params.use_virulence_dbs    = []
        params.use_serotype_dbs     = []
        params.target_sample_size   = null
    }

    streptococcus {
        params.species              = 'streptococcus'
        params.species_dir          = 'streptococcus'
        params.mlst_scheme          = null
        params.reference_genome     = null
        params.reference_genome_idx = null
        params.reference_genome_gff = null
        params.chewbbaca_db         = "${params.root}/assets/cgmlst/streptococcus/alleles_rereffed"
        params.core_loci_bed        = null
        params.training_file        = null
        params.use_virulence_dbs    = []
        params.use_serotype_dbs     = []
        params.target_sample_size   = null
    }

    ngp { includeConfig 'conf/ngp.config' }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']
def trace_timestamp = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled     = true
    file        = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
    overwrite   = true
}
report {
    enabled     = true
    file        = "${params.tracedir}/execution_report_${trace_timestamp}.html"
    overwrite   = true
}
trace {
    enabled     = true
    file        = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
    overwrite   = true
}
dag {
    enabled     = true
    file        = "${params.tracedir}/pipeline_dag_${trace_timestamp}.html"
    overwrite   = true
}

manifest {
    name            = 'jasen'
    author          = """@ryanjameskennedy""" // The author field is deprecated from Nextflow version 24.10.0, use contributors instead
    contributors    = [
        [
            name: 'Ryan J Kennedy',
            affiliation: 'Centre for Molecular Diagnostics, Lund University Hospital, Lund, Region Skåne, Sweden',
            email: 'ryan.kennedy@skane.se',
            github: 'https://github.com/ryanjameskennedy',
            contribution: ['author', 'maintainer'],
            orcid: 'https://orcid.org/0000-0002-5084-5832'
        ],
        [
            name: 'Markus H Johansson',
            affiliation: 'Centre for Molecular Diagnostics, Lund University Hospital, Lund, Region Skåne, Sweden',
            email: 'markus.h.johansson@skane.se',
            github: 'https://github.com/mhkc',
            contribution: ['contributor'],
            orcid: 'https://orcid.org/0000-0001-8485-9143'
        ],
        [
            name: 'Samuel Lampa',
            affiliation: 'Karolinska University Hospital, Stockholm, Sweden',
            email: 'samuel.lampa@scilifelab.se',
            github: 'https://github.com/samuell',
            contribution: ['contributor'],
            orcid: 'https://orcid.org/0000-0001-6740-9212'
        ],
    ]
    homePage        = 'https://github.com/genomic-medicine-sweden/jasen'
    description     = """Bacterial typing pipeline for clinical NGS data. Written in NextFlow, Python & Bash."""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=22.10.1'
    version         = '1.0.0'
    doi             = ''
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'
