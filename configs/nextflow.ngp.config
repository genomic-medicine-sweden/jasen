params {
	penv = "OpenMP"
	root = "/gms-apps/pipelines/jasen" //edit
	amrfinderDb = "${root}/assets/amrfinder_db/latest"
	resfinderDb = "${params.root}/assets/resfinder_db"
	pointfinderDb = "${params.root}/assets/pointfinder_db"
	serotypefinderDb = "${root}/assets/serotypefinder_db"
	virulencefinderDb = "${params.root}/assets/virulencefinder_db"
	pubMlstDb = "${root}/assets/mlst_db/pubmlst"
	krakenDb = "/gms-home/isasyl/code/JASEN" //edit if useKraken = true
	workDir = "/gms-apps/pipelines/jasen/trash" //edit
	publishDir = ""
	publishDirMode = 'copy'
	publishDirOverwrite = true
	outdir = "/gms-apps/pipelines/jasen/trash" //edit
	scratch = true
	containerDir = "${root}/container"
	args = ""
	prefix = ""
	bamDir = "bam"
	cdmDir = "cdm_input"
	vcfDir = "vcf"
	cronCopy = false
	useKraken = false
	useSkesa = false // To use spades set useSkesa = false
  devMode = false

  cpus_small=2
  cpus_medium=8
  cpus_large=16
  cpus_huge=32
  mem_small='6 GB'
  mem_medium='14 GB'
  mem_large='30 GB'
  mem_huge='120 GB'
}

apptainer {
	enabled = true
	runOptions = '--bind /gms-apps/pipelines/jasen/:/gms-apps/pipelines/jasen/,/gms-scratch/:/gms-scratch/'
	cacheDir = "${params.containerDir}/"

	env.NXF_APPTAINER_LOCALCACHEDIR="${params.workDir}"
	env.NXF_APPTAINER_CACHEDIR="${params.containerDir}"
	env.NXF_APPTAINER_TMPDIR="${params.workDir}"

	env.APPTAINER_LOCALCACHEDIR="${params.workDir}"
	env.APPTAINER_CACHEDIR="${params.containerDir}"
	env.APPTAINER_TMPDIR="${params.workDir}"
	env.APPTAINER_ROOTFS="${params.workDir}"
}

profiles {
	staphylococcus_aureus {
		params.species = "staphylococcus aureus"
		params.speciesDir = 'saureus'
		params.mlstScheme = 'saureus'
		params.referenceGenome = "${params.root}/assets/genomes/staphylococcus_aureus/GCF_000012045.1.fasta"
		params.referenceGenomeIdx = "${params.root}/assets/genomes/staphylococcus_aureus/GCF_000012045.1.fasta.fai"
		params.referenceGenomeGff = "${params.root}/assets/genomes/staphylococcus_aureus/GCF_000012045.1.gff"
		params.mlstBlastDb = "${params.root}/assets/mlst_db/blast"
		params.chewbbacaDb = "${params.root}/assets/cgmlst/staphylococcus_aureus/alleles_rereffed"
		params.coreLociBed = "${params.root}/assets/cgmlst/staphylococcus_aureus/bed/GCF_000012045.1.bed"
		params.trainingFile = "${params.root}/assets/prodigal_training_files/Staphylococcus_aureus.trn"
		params.useVirulenceDbs = ['s.aureus_hostimm', 's.aureus_exoenzyme', 's.aureus_toxin']
		params.useSerotypeDbs = []
	}

	escherichia_coli {
		params.species = 'escherichia coli'
		params.speciesDir = 'ecoli'
		params.mlstScheme = 'ecoli_achtman_4'
		params.referenceGenome = "${params.root}/assets/genomes/escherichia_coli/GCF_000005845.2.fasta"
		params.referenceGenomeIdx = "${params.root}/assets/genomes/escherichia_coli/GCF_000005845.2.fasta.fai"
		params.referenceGenomeGff = "${params.root}/assets/genomes/escherichia_coli/GCF_000005845.2.gff"
		// params.chewbbacaDb = "${params.root}/assets/cgmlst/escherichia_coli/alleles_rereffed"
		// params.coreLociBed = "${params.root}/assets/cgmlst/escherichia_coli/bed/GCF_000005845.2.bed"
		// params.trainingFile = "${params.root}/assets/cgmlst/escherichia_coli/alleles_rereffed/Escherichia_coli.trn"
		params.mlstBlastDb = "${params.root}/assets/mlst_db/blast"
		params.chewbbacaDb = "${params.root}/assets/wgmlst/escherichia_coli/alleles/ecoli_INNUENDO_wgMLST"
		params.coreLociBed = "${params.root}/assets/wgmlst/escherichia_coli/bed/GCF_000005845.2.bed"
		params.shigapassDb = "${params.root}/assets/ShigaPass/SCRIPT/ShigaPass_DataBases"
		params.trainingFile = "${params.root}/assets/wgmlst/escherichia_coli/alleles/ecoli_INNUENDO_wgMLST/Escherichia_coli.trn"
		params.useVirulenceDbs = ['virulence_ecoli', 'stx']
		params.useSerotypeDbs = ['O_type', 'H_type']
	}

	klebsiella_pneumoniae {
		params.species = 'klebsiella pneumoniae'
		params.speciesDir = 'kpneumoniae'
		params.mlstScheme = 'klebsiella'
		params.referenceGenome = "${params.root}/assets/genomes/klebsiella_pneumoniae/GCF_000240185.1.fasta"
		params.referenceGenomeIdx = "${params.root}/assets/genomes/klebsiella_pneumoniae/GCF_000240185.1.fasta.fai"
		params.referenceGenomeGff = "${params.root}/assets/genomes/klebsiella_pneumoniae/GCF_000240185.1.gff"
		params.mlstBlastDb = "${params.root}/assets/mlst_db/blast"
		params.chewbbacaDb = "${params.root}/assets/cgmlst/klebsiella_pneumoniae/alleles_rereffed"
		params.coreLociBed = "${params.root}/assets/cgmlst/klebsiella_pneumoniae/bed/GCF_000240185.1.bed"
		params.trainingFile = "${params.root}/assets/cgmlst/klebsiella_pneumoniae/alleles_rereffed/Klebsiella_pneumoniae.trn"
		params.useVirulenceDbs = []
		params.useSerotypeDbs = ['O_type', 'H_type']
	}

	mycobacterium_tuberculosis {
		params.species = 'mycobacterium tuberculosis'
		params.speciesDir = 'mtuberculosis'
		params.referenceGenome = "${params.root}/assets/genomes/mycobacterium_tuberculosis/GCF_000195955.2.fasta"
		params.referenceGenomeIdx = "${params.root}/assets/genomes/mycobacterium_tuberculosis/GCF_000195955.2.fasta.fai"
		params.referenceGenomeGff = "${params.root}/assets/genomes/mycobacterium_tuberculosis/GCF_000195955.2.gff"
		params.coreLociBed = "${params.root}/assets/cgmlst/mycobacterium_tuberculosis/bed/GCF_000195955.2.bed"
		params.tbdbBed = "${params.root}/assets/tbprofiler_dbs/bed/converged_who_fohm_tbdb.bed.gz"
		params.tbdbBedIdx = "${params.tbdbBed}.tbi"
	}
}

process {
	executor='sge'
	penv=params.penv
	time=1.h
	memory='1 GB'
	cpus=params.cpus_small

	withName: amrfinderplus {
		container = "${params.containerDir}/ncbi-amrfinderplus.sif"
		cpus = params.cpus_medium
		memory = params.mem_medium
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/amrfinderplus", mode: 'copy', overwrite: true ]
		ext.args = "--plus"
	}
	withName: annotate_delly {
		container = "${params.containerDir}/bonsai-prp.sif"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/${params.vcfDir}", mode: 'copy', overwrite: true ]
	}
	withName: assembly_trim_clean {
		container = "${params.containerDir}/perl-json.sif"
		cpus = params.cpus_medium
		memory = params.mem_medium
		ext.args = "--min_quality 23 --bases_to_trim 400 --min_length 100 -p 1 --nosingletons"
	}
	withName: bracken {
		container = "${params.containerDir}/bracken.sif"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/kraken", mode: 'copy', overwrite: true ]
		ext.args = "-r 150"
	}
	withName: bwa_index {
		container = "${params.containerDir}/bwakit.sif"
		ext.args = "-M"
	}
	withName: bwa_mem_dedup {
		container = "${params.containerDir}/bwakit.sif"
		cpus = params.cpus_large
		memory = params.mem_large
		ext.args = "-M"
	}
	withName: bwa_mem_ref {
		container = "${params.containerDir}/bwakit.sif"
		cpus = params.cpus_large
		memory = params.mem_large
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/${params.bamDir}", mode: 'copy', overwrite: true ]
		ext.args = "-M"
	}
	withName: chewbbaca_allelecall {
		cpus = params.cpus_large
		memory = params.mem_large
		container = "${params.containerDir}/chewbbaca.sif"
	}
	withName: chewbbaca_split_results {
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/chewbbaca", mode: 'copy', overwrite: true ]
	}
	withName: copy_to_cron {
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/cron", mode: 'copy', overwrite: true, pattern: '*.json' ]
	}
	withName: create_analysis_result {
		container = "${params.containerDir}/bonsai-prp.sif"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/analysis_result", mode: 'copy', overwrite: true ]
	}
	withName: create_cdm_input {
		container = "${params.containerDir}/bonsai-prp.sif"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/${params.cdmDir}", mode: 'copy', overwrite: true ]
	}
	withName: create_yaml {
		container = "${params.containerDir}/bonsai-prp.sif"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/analysis_yaml", mode: 'copy', overwrite: true ]
		ext.args_prp = {"${params.outdir}/${params.speciesDir}/analysis_result"}
		ext.args_sourmash = {"${params.outdir}/${params.speciesDir}/sourmash"}
	}
	withName: export_to_cdm {
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/qc", mode: 'copy', overwrite: true ]
	}
	withName: freebayes {
		cpus = params.cpus_small
		container = "${params.containerDir}/freebayes.sif"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/freebayes", mode: 'copy', overwrite: true ]
		ext.args = "-C 2 -F 0.2 --pooled-continuous"
	}
	withName: kraken {
		memory = params.mem_huge
		cpus = params.cpus_huge
		clusterOptions = { "-l h_vmem=${task.memory.toString().replaceAll(/[\sB]/,'')}" }
		container = "${params.containerDir}/kraken2.sif"
		ext.args = "--gzip-compressed"
	}
	withName: mask_polymorph_assembly {
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/mask", mode: 'copy', overwrite: true ]
	}
	withName: mlst {
		container = "${params.containerDir}/mlst.sif"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/mlst", mode: 'copy', overwrite: true ]
	}
	withName: mykrobe {
		cpus = params.cpus_medium
		memory = params.mem_small
		container = "${params.containerDir}/mykrobe.sif"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/mykrobe", mode: 'copy', overwrite: true ]
		ext.args = "--species tb --format csv"
	}
	withName: post_align_qc {
		cpus = params.cpus_medium
		memory = params.mem_small
		container = "${params.containerDir}/bonsai-prp.sif"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/postalignqc", mode: 'copy', overwrite: true ]
	}
	withName: quast {
		container = "${params.containerDir}/quast.sif"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/quast", mode: 'copy', overwrite: true ]
	}
	withName: resfinder {
		container = "${params.containerDir}/resfinder.sif"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/resfinder", mode: 'copy', overwrite: true ]
	}
	withName: samtools_index_assembly {
		cpus = params.cpus_large
		memory = params.mem_large
		container = "https://depot.galaxyproject.org/singularity/samtools:1.17--h00cdaf9_0"
	}
	withName: samtools_index_ref {
		cpus = params.cpus_large
		memory = params.mem_large
		container = "${params.containerDir}/samtools.sif"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/${params.bamDir}", mode: 'copy', overwrite: true ]
	}
	withName: samtools_sort_ref {
		cpus = params.cpus_large
		memory = params.mem_small
		container = "https://depot.galaxyproject.org/singularity/samtools:1.17--h00cdaf9_0"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/${params.bamDir}", mode: 'copy', overwrite: true ]
	}
	withName: save_analysis_metadata {
		container = "${params.containerDir}/bonsai-prp.sif"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/analysis_metadata", mode: 'copy', overwrite: true ]
	}
	withName: serotypefinder {
		cpus = params.cpus_small
		container = "${params.containerDir}/serotypefinder.sif"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/serotypefinder", mode: 'copy', overwrite: true ]
	}
	withName: shigapass {
		cpus = 2
		container = "https://depot.galaxyproject.org/singularity/shigapass:1.5.0--hdfd78af_0"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/shigapass", mode: 'copy', overwrite: true ]
	}
	withName: skesa {
		container = "${params.containerDir}/skesa.sif"
		cpus = params.cpus_large
		memory = params.mem_large
		time=2.h
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/skesa", mode: 'copy', overwrite: true ]
		ext.args = "--cores params.cpus_large --memory 30"
		ext.when = { params.useSkesa }
	}
	withName: snippy {
		cpus = params.cpus_large
		memory = params.mem_large
		container = "${params.containerDir}/snippy.sif"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/snippy", mode: 'copy', overwrite: true ]
	}
	withName: sourmash {
		container = "${params.containerDir}/sourmash.sif"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/sourmash", mode: 'copy', overwrite: true ]
		ext.args = "-p k=31,k=51,scaled=1000"
	}
	withName: spades_illumina {
		container = "${params.containerDir}/spades.sif"
		cpus = params.cpus_large
		memory = params.mem_large
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/spades_illumina", mode: 'copy', overwrite: true ]
		ext.args = "--isolate"
		ext.when = { !params.useSkesa }
	}
	withName: spades_iontorrent {
		container = "${params.containerDir}/spades.sif"
		cpus = params.cpus_large
		memory = params.mem_large
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/spades_iontorrent", mode: 'copy', overwrite: true ]
		ext.args = "--iontorrent --careful --sc"
	}
	withName: tbprofiler_mergedb {
		cpus = params.cpus_large
		memory = params.mem_medium
		container = "${params.containerDir}/tb-profiler.sif"
		publishDir = [ [ path: "${params.outdir}/${params.speciesDir}/tbprofiler_mergedb", mode: 'copy', overwrite: true, pattern: '*.json' ], [ path: "${params.outdir}/${params.speciesDir}/${params.vcfDir}", mode: 'copy', overwrite: true, pattern: '*.{vcf.gz}' ], [ path: "${params.outdir}/${params.speciesDir}/${params.bamDir}", mode: 'copy', overwrite: true, pattern: '*.bam*' ] ]
		ext.args = "--external_db ${params.root}/assets/tbdb/converged_who_fohm_tbdb --calling_params '-q 15'"
	}
	withName: virulencefinder {
		cpus = params.cpus_small
		memory = params.mem_small
		container = "${params.containerDir}/virulencefinder.sif"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/virulencefinder", mode: 'copy', overwrite: true ]
	}
}

dag {
    overwrite = true
}

manifest {
	homePage = 'https://github.com/genomic-medicine-sweden/jasen'
	description = 'Pipeline epitypes numerous bacterial species as well as identifies AMR and virulence genes'
	mainScript = 'main.nf'
	version = '0.8.0'
}
