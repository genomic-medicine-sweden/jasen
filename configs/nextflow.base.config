params {
	root = "/filepath/to/JASEN" //edit
	amrfinderDb = "${root}/assets/amrfinder_db/latest"
	resfinderDb = "${root}/assets/resfinder_db"
	pointfinderDb = "${root}/assets/pointfinder_db"
	virulencefinderDb = "${root}/assets/virulencefinder_db"
	mlstBlastDb = "${root}/assets/mlst_db/blast"
	krakenDb = "/filepath/to/kraken_db" //edit if useKraken = true
	workDir = "/filepath/to/workdir" //edit
	publishDir = ""
	publishDirMode = 'copy'
	publishDirOverwrite = true
	outdir = "/filepath/to/outdir" //edit
	scratch = true
	containerDir = "${root}/container"
	args = ""
	prefix = ""
	cronCopy = false
	useKraken = true
	useSkesa = true // To use spades set useSkesa = false
}

profiles {
	staphylococcus_aureus {
		params.species = "staphylococcus aureus"
		params.speciesDir = 'saureus'
		params.genomeReference = "${params.root}/assets/genomes/staphylococcus_aureus/NC_002951.2.fasta"
		params.chewbbacaDb = "${params.root}/assets/cgmlst/staphylococcus_aureus/alleles_rereffed"
		params.coreLociBed = "${params.root}/assets/cgmlst/staphylococcus_aureus/bed/NC_002951.2.bed"
		params.trainingFile = "${params.root}/assets/cgmlst/staphylococcus_aureus/alleles_rereffed/Staphylococcus_aureus.trn"
		params.useVirulenceDbs = ['s.aureus_hostimm', 's.aureus_exoenzyme', 's.aureus_toxin']
	}

	escherichia_coli {
		params.species = 'escherichia coli'
		params.speciesDir = 'ecoli'
		params.genomeReference = "${params.root}/assets/genomes/escherichia_coli/NC_000913.3.fasta"
		// params.chewbbacaDb = "${params.root}/assets/cgmlst/escherichia_coli/alleles_rereffed"
		// params.coreLociBed = "${params.root}/assets/cgmlst/escherichia_coli/bed/NC_000913.3.bed"
		// params.trainingFile = "${params.root}/assets/cgmlst/escherichia_coli/alleles_rereffed/Escherichia_coli.trn"
		params.chewbbacaDb = "${params.root}/assets/wgmlst/escherichia_coli/alleles/ecoli_INNUENDO_wgMLST"
		params.coreLociBed = "${params.root}/assets/wgmlst/escherichia_coli/bed/NC_000913.3.bed"
		params.trainingFile = "${params.root}/assets/wgmlst/escherichia_coli/alleles/ecoli_INNUENDO_wgMLST/Escherichia_coli.trn"
		params.useVirulenceDbs = ['virulence_ecoli']
	}

	klebsiella_pneumoniae {
		params.species = 'klebsiella pneumoniae'
		params.speciesDir = 'kpneumoniae'
		params.genomeReference = "${params.root}/assets/genomes/klebsiella_pneumoniae/NC_016845.1.fasta"
		params.chewbbacaDb = "${params.root}/assets/cgmlst/klebsiella_pneumoniae/alleles_rereffed"
		params.coreLociBed = "${params.root}/assets/cgmlst/klebsiella_pneumoniae/bed/NC_016845.1.bed"
		params.trainingFile = "${params.root}/assets/cgmlst/klebsiella_pneumoniae/alleles_rereffed/Klebsiella_pneumoniae.trn"
		params.useVirulenceDbs = []
	}

	mycobacterium_tuberculosis {
		params.species = 'mycobacterium tuberculosis'
		params.speciesDir = 'mtuberculosis'
		params.genomeReference = "${params.root}/assets/genomes/mycobacterium_tuberculosis/NC_000962.3.fasta"
		params.coreLociBed = "${params.root}/assets/cgmlst/mycobacterium_tuberculosis/bed/NC_000962.3.bed"
	}
}

process {
	time=1.h
	memory='1 GB'
	cpus=2

	withName: abritamr {
		container = "${params.containerDir}/abritamr.sif"
		cpus = 4
		memory = '10 GB'
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/abritamr", mode: 'copy', overwrite: true ]
		ext.args = "--sop plus"
	}
	withName: amrfinderplus {
		container = "${params.containerDir}/amrfinderplus.sif"
		cpus = 4
		memory = '10 GB'
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/amrfinderplus", mode: 'copy', overwrite: true ]
		ext.args = "--plus"
	}
	withName: assembly_trim_clean {
		container = "${params.containerDir}/perl.sif"
		cpus = 4
		memory = '10 GB'
		ext.args = "--min_quality 23 --bases_to_trim 400 --min_length 100 -p 1 --nosingletons"
	}
	withName: bracken {
		container = "${params.containerDir}/bracken.sif"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/kraken", mode: 'copy', overwrite: true ]
		ext.args = "-r 150"
	}
	withName: bwa_index {
		container = "${params.containerDir}/bwakit.sif"
		ext.args = "-M"
	}
	withName: bwa_mem_dedup {
		container = "${params.containerDir}/bwakit.sif"
		cpus = 16
		memory = '20 GB'
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/bwa", mode: 'copy', overwrite: true ]
		ext.args = "-M"
	}
	withName: bwa_mem_ref {
		container = "${params.containerDir}/bwakit.sif"
		cpus = 16
		memory = '20 GB'
		ext.args = "-M"
	}
	withName: chewbbaca_allelecall {
		cpus = 16
		memory = '12 GB'
		container = "${params.containerDir}/chewbbaca.sif"
	}
	withName: chewbbaca_split_results {
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/chewbbaca", mode: 'copy', overwrite: true ]
	}
	withName: copy_to_cron {
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/cron", mode: 'copy', overwrite: true, pattern: '*.json', ]
	}
	withName: create_analysis_result {
		container = "${params.containerDir}/pythonScripts.sif"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/analysis_result", mode: 'copy', overwrite: true ]
	}
	withName: create_cdm_input {
		container = "${params.containerDir}/pythonScripts.sif"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/cdm_input", mode: 'copy', overwrite: true ]
	}
	withName: export_to_cdm {
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/qc", mode: 'copy', overwrite: true ]
	}
	withName: freebayes {
		container = "${params.containerDir}/freebayes.sif"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/freebayes", mode: 'copy', overwrite: true ]
		ext.args = "-C 2 -F 0.2 --pooled-continuous"
	}
	withName: kraken {
		memory = '46 GB'
		cpus = 16
		container = "${params.containerDir}/kraken2.sif"
		ext.args = "--gzip-compressed"
	}
	withName: mask_polymorph_assembly {
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/mask", mode: 'copy', overwrite: true ]
	}
	withName: mlst {
		container = "${params.containerDir}/mlst.sif"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/mlst", mode: 'copy', overwrite: true ]
	}
	withName: mykrobe {
		memory = '4 GB'
		container = "${params.containerDir}/mykrobe.sif"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/mykrobe", mode: 'copy', overwrite: true ]
		ext.args = "--species tb --format json"
	}
	withName: post_align_qc {
		container = "${params.containerDir}/postAlignQc.sif"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/postalignqc", mode: 'copy', overwrite: true ]
	}
	withName: quast {
		container = "${params.containerDir}/quast.sif"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/quast", mode: 'copy', overwrite: true ]
	}
	withName: resfinder {
		container = "${params.containerDir}/resfinder.sif"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/resfinder", mode: 'copy', overwrite: true ]
	}
	withName: samtools_index {
		cpus = 16
		memory = '2 GB'
		container = "${params.containerDir}/samtools.sif"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/samtools", mode: 'copy', overwrite: true ]
	}
	withName: save_analysis_metadata {
		container = "${params.containerDir}/pythonScripts.sif"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/analysis_metadata", mode: 'copy', overwrite: true ]
	}
	withName: snippy {
		memory = '32 GB'
		container = "${params.containerDir}/snippy.sif"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/snippy", mode: 'copy', overwrite: true ]
	}
	withName: sourmash {
		container = "${params.containerDir}/sourmash.sif"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/sourmash", mode: 'copy', overwrite: true ]
		ext.args = "-p k=31,k=51,scaled=1000"
	}
	withName: spades_illumina {
		container = "${params.containerDir}/spades.sif"
		cpus = 16
		memory = '15 GB'
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/spades_illumina", mode: 'copy', overwrite: true ]
		ext.args = "--isolate"
		ext.when = { !params.useSkesa }
	}
	withName: spades_iontorrent {
		container = "${params.containerDir}/spades.sif"
		cpus = 16
		memory = '15 GB'
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/spades_iontorrent", mode: 'copy', overwrite: true ]
		ext.args = "--iontorrent --careful --sc"
	}
	withName: skesa {
		container = "${params.containerDir}/skesa.sif"
		cpus = 16
		memory = '32 GB'
		time=2.h
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/skesa", mode: 'copy', overwrite: true ]
		ext.args = "--cores 16 --memory 32"
		ext.when = { params.useSkesa }
	}
	withName: tbprofiler {
		memory = '10 GB'
		container = "${params.containerDir}/tbprofiler.sif"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/tbprofiler", mode: 'copy', overwrite: true ]
	}
	withName: virulencefinder {
		cpus = 2
		container = "${params.containerDir}/virulencefinder.sif"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/virulencefinder", mode: 'copy', overwrite: true ]
	}
}

singularity {
	//runOptions = '--bind /local/' // Bind/mount directories to image //Remove "//" and edit directories you wish to bind
	//autoMounts = true
	enabled = true

	env.NXF_SINGULARITY_LOCALCACHEDIR="${params.workDir}"
	env.NXF_SINGULARITY_CACHEDIR="${params.workDir}"
	env.NXF_SINGULARITY_TMPDIR="${params.workDir}"

	env.SINGULARITY_LOCALCACHEDIR="${params.workDir}"
	env.SINGULARITY_CACHEDIR="${params.workDir}"
	env.SINGULARITY_TMPDIR="${params.workDir}"
	env.SINGULARITY_ROOTFS="${params.workDir}"
}

dag {
        overwrite = true
}


manifest {
	homePage = 'https://github.com/genomic-medicine-sweden/JASEN'
	description = 'Pipeline epitypes numerous bacterial species as well as identifies AMR and virulence genes'
	mainScript = 'main.nf'
	version = '1.0.0'
}
