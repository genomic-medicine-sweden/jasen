// Hopper specific configuration for micro wgs pipeline //

params {
	root = "/fs1/pipelines/jasen"
	// DATABASES //
	amrfinderDb = "${root}/assets/amrfinder_db/latest"
	resfinderDb = "${root}/assets/resfinder_db"
	pointfinderDb = "${root}/assets/pointfinder_db"
	serotypefinderDb = "${root}/assets/serotypefinder_db"
	virulencefinderDb = "${root}/assets/virulencefinder_db"
	pubMlstDb = "${root}/assets/mlst_db/pubmlst"
	krakenDb = "/fs1/resources/ref/micro/krakenstd"
	// INPUT & OUTPUT //
	workDir = "/fs1/ryan/pipelines/jasen/wd"
	publishDir = ""
	publishDirMode = 'copy'
	publishDirOverwrite = true
	scratch = true
	containerDir = "${root}/container" //change
	outdir = "/fs1/results/jasen"
	args = ""
	prefix = ""
	// PIPELINE OPTIONS //
	cronCopy = true
	useKraken = true
	useSkesa = true // To use spades set useSkesa = false
	queue='grace-high'
}

singularity{
	enabled = true
	runOptions = '--bind /fs1/ --bind /fs2/ --bind /local/ --bind /mnt/beegfs/'
	cacheDir = "${params.containerDir}/"
}

profiles {
	staphylococcus_aureus {
		params.species = "staphylococcus aureus"
		params.speciesDir = 'saureus'
		params.mlstScheme = 'saureus'
		params.genomeReference = "${params.root}/assets/genomes/staphylococcus_aureus/NC_002951.2.fasta"
		params.chewbbacaDb = "${params.root}/assets/cgmlst/staphylococcus_aureus/alleles_rereffed"
		params.coreLociBed = "${params.root}/assets/cgmlst/staphylococcus_aureus/bed/NC_002951.2.bed"
		params.trainingFile = "${params.root}/assets/cgmlst/staphylococcus_aureus/alleles_rereffed/Staphylococcus_aureus.trn"
		params.useVirulenceDbs = ['s.aureus_hostimm', 's.aureus_exoenzyme', 's.aureus_toxin']
		params.useSerotypeDbs = []
	}

	escherichia_coli {
		params.species = 'escherichia coli'
		params.speciesDir = 'ecoli'
		params.mlstScheme = 'ecoli_achtman_4'
		params.genomeReference = "${params.root}/assets/genomes/escherichia_coli/NC_000913.3.fasta"
		// params.chewbbacaDb = "${params.root}/assets/cgmlst/escherichia_coli/alleles_rereffed"
		// params.coreLociBed = "${params.root}/assets/cgmlst/escherichia_coli/bed/NC_000913.3.bed"
		// params.trainingFile = "${params.root}/assets/cgmlst/escherichia_coli/alleles_rereffed/Escherichia_coli.trn"
		params.chewbbacaDb = "${params.root}/assets/wgmlst/escherichia_coli/alleles/ecoli_INNUENDO_wgMLST"
		params.coreLociBed = "${params.root}/assets/wgmlst/escherichia_coli/bed/NC_000913.3.bed"
		params.trainingFile = "${params.root}/assets/wgmlst/escherichia_coli/alleles/ecoli_INNUENDO_wgMLST/Escherichia_coli.trn"
		params.useVirulenceDbs = ['virulence_ecoli', 'stx']
		params.useSerotypeDbs = ['O_type', 'H_type']
	}

	klebsiella_pneumoniae {
		params.species = 'klebsiella pneumoniae'
		params.speciesDir = 'kpneumoniae'
		params.mlstScheme = 'klebsiella'
		params.genomeReference = "${params.root}/assets/genomes/klebsiella_pneumoniae/NC_016845.1.fasta"
		params.chewbbacaDb = "${params.root}/assets/cgmlst/klebsiella_pneumoniae/alleles_rereffed"
		params.coreLociBed = "${params.root}/assets/cgmlst/klebsiella_pneumoniae/bed/NC_016845.1.bed"
		params.trainingFile = "${params.root}/assets/cgmlst/klebsiella_pneumoniae/alleles_rereffed/Klebsiella_pneumoniae.trn"
		params.useVirulenceDbs = []
		params.useSerotypeDbs = ['O_type', 'H_type']
	}

	mycobacterium_tuberculosis {
		params.species = 'mycobacterium tuberculosis'
		params.speciesDir = 'mtuberculosis'
		params.genomeReference = "${params.root}/assets/genomes/mycobacterium_tuberculosis/NC_000962.3.fasta"
		params.coreLociBed = "${params.root}/assets/cgmlst/mycobacterium_tuberculosis/bed/NC_000962.3.bed"
		params.tbdbBed = "${params.root}/assets/tbprofiler_dbs/bed/converged_who_fohm_tbdb.bed.gz"
		params.tbdbBedIdx = "${params.tbdbBed}.tbi"
	}
}

process {
	executor='slurm'
	queue=params.queue
	time=1.h
	memory='1 GB'
	cpus=2

	withName: amrfinderplus {
		container = "https://depot.galaxyproject.org/singularity/ncbi-amrfinderplus:3.11.11--h6e70893_0"
		cpus = 4
		memory = '10 GB'
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/amrfinderplus", mode: 'copy', overwrite: true ]
		ext.args = "--plus"
	}
	withName: annotate_delly {
		container = "docker://clinicalgenomicslund/bonsai-prp:0.7.1"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/annotate_delly", mode: 'copy', overwrite: true ]
	}
	withName: assembly_trim_clean {
		container = "https://depot.galaxyproject.org/singularity/perl-json:4.10--pl5321hdfd78af_0"
		cpus = 4
		memory = '10 GB'
		ext.args = "--min_quality 23 --bases_to_trim 400 --min_length 100 -p 1 --nosingletons"
	}
	withName: bracken {
		container = "https://depot.galaxyproject.org/singularity/bracken:2.8--py39hc16433a_0"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/kraken", mode: 'copy', overwrite: true ]
		ext.args = "-r 150"
	}
	withName: bwa_index {
		container = "https://depot.galaxyproject.org/singularity/bwakit:0.7.17.dev1--hdfd78af_1"
		ext.args = "-M"
	}
	withName: bwa_mem_dedup {
		container = "https://depot.galaxyproject.org/singularity/bwakit:0.7.17.dev1--hdfd78af_1"
		cpus = 16
		memory = '20 GB'
		ext.args = "-M"
	}
	withName: bwa_mem_ref {
		container = "https://depot.galaxyproject.org/singularity/bwakit:0.7.17.dev1--hdfd78af_1"
		cpus = 16
		memory = '20 GB'
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/bwa", mode: 'copy', overwrite: true ]
		ext.args = "-M"
	}
	withName: chewbbaca_allelecall {
		cpus = 16
		memory = '12 GB'
		container = "https://depot.galaxyproject.org/singularity/chewbbaca:3.3.2--pyhdfd78af_0"
	}
	withName: chewbbaca_split_results {
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/chewbbaca", mode: 'copy', overwrite: true ]
	}
	withName: copy_to_cron {
		publishDir = [ [ path: "/fs1/results/cron/jasen/${params.speciesDir}", mode: 'copy', overwrite: true, pattern: '*.json' ], [ path: "/fs1/results/cron/qc", mode: 'copy', overwrite: true, pattern: '*.cdmpy' ] ]
	}
	withName: create_analysis_result {
		container = "docker://clinicalgenomicslund/bonsai-prp:0.7.1"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/analysis_result", mode: 'copy', overwrite: true ]
	}
	withName: create_cdm_input {
		container = "docker://clinicalgenomicslund/bonsai-prp:0.7.1"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/cdm_input", mode: 'copy', overwrite: true ]
	}
	withName: create_yaml {
		container = "docker://clinicalgenomicslund/bonsai-prp:0.7.1"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/analysis_yaml", mode: 'copy', overwrite: true ]
		ext.args_prp = {"${params.outdir}/${params.speciesDir}/analysis_result"}
		ext.args_sourmash = {"${params.outdir}/${params.speciesDir}/sourmash"}
	}
	withName: export_to_cdm {
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/qc", mode: 'copy', overwrite: true ]
	}
	withName: flye {
		container = "${params.containerDir}/flye.sif"
		cpus = 20
		memory = '32 GB'
		time=2.h
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/flye", mode: 'copy', overwrite: true ]
		ext.args = "--threads 40 --genome-size 2.8m --asm-coverage 50"
	}
	withName: freebayes {
		container = "https://depot.galaxyproject.org/singularity/freebayes:1.3.6--hbfe0e7f_2"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/freebayes", mode: 'copy', overwrite: true ]
		ext.args = "-C 2 -F 0.2 --pooled-continuous"
	}
	withName: kraken {
		memory = '46 GB'
		cpus = 16
		container = "https://depot.galaxyproject.org/singularity/kraken2:2.1.2--pl5321h9f5acd7_3"
		ext.args = "--gzip-compressed"
	}
	withName: mask_polymorph_assembly {
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/mask", mode: 'copy', overwrite: true ]
	}
	withName: medaka {
		container = "${params.containerDir}/medaka.sif"
		cpus = 20
		memory = '32 GB'
		time=2.h
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/medaka", mode: 'copy', overwrite: true ]
		ext.args = "--threads 40 -m r941_min_sup_g507"
	}
	withName: mlst {
		container = "https://depot.galaxyproject.org/singularity/mlst:2.23.0--hdfd78af_1"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/mlst", mode: 'copy', overwrite: true ]
	}
	withName: mykrobe {
		memory = '4 GB'
		container = "https://depot.galaxyproject.org/singularity/mykrobe:0.12.2--py39h70e0db4_0"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/mykrobe", mode: 'copy', overwrite: true ]
		ext.args = "--species tb --format csv"
	}
	withName: post_align_qc {
		memory = '2 GB'
		container = "docker://clinicalgenomicslund/bonsai-prp:0.7.1"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/postalignqc", mode: 'copy', overwrite: true ]
	}
	withName: quast {
		container = "https://depot.galaxyproject.org/singularity/quast:5.2.0--py310pl5321hc8f18ef_2"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/quast", mode: 'copy', overwrite: true ]
	}
	withName: resfinder {
		container = "https://depot.galaxyproject.org/singularity/resfinder:4.4.2--pyhdfd78af_1"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/resfinder", mode: 'copy', overwrite: true ]
	}
	withName: samtools_index {
		cpus = 16
		memory = '2 GB'
		container = "https://depot.galaxyproject.org/singularity/samtools:1.17--h00cdaf9_0"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/samtools", mode: 'copy', overwrite: true ]
	}
	withName: save_analysis_metadata {
		container = "docker://clinicalgenomicslund/bonsai-prp:0.7.1"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/analysis_metadata", mode: 'copy', overwrite: true ]
	}
	withName: serotypefinder {
		cpus = 2
		container = "https://depot.galaxyproject.org/singularity/serotypefinder:2.0.2--py312hdfd78af_1"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/serotypefinder", mode: 'copy', overwrite: true ]
	}
	withName: skesa {
		container = "https://depot.galaxyproject.org/singularity/skesa:2.4.0--he1c1bb9_0"
		cpus = 16
		memory = '32 GB'
		time=2.h
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/skesa", mode: 'copy', overwrite: true ]
		ext.args = "--cores 16 --memory 32"
		ext.when = { params.useSkesa }
	}
	withName: snippy {
		memory = '32 GB'
		container = "https://depot.galaxyproject.org/singularity/snippy:4.6.0--hdfd78af_2"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/snippy", mode: 'copy', overwrite: true ]
	}
	withName: sourmash {
		container = "https://depot.galaxyproject.org/singularity/sourmash:4.8.2--hdfd78af_0"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/sourmash", mode: 'copy', overwrite: true ]
		ext.args = "-p k=31,k=51,scaled=1000"
	}
	withName: spades_illumina {
		container = "https://depot.galaxyproject.org/singularity/spades:3.15.5--h95f258a_1"
		cpus = 16
		memory = '15 GB'
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/spades_illumina", mode: 'copy', overwrite: true ]
		ext.args = "--isolate"
		ext.when = { !params.useSkesa }
	}
	withName: spades_iontorrent {
		container = "https://depot.galaxyproject.org/singularity/spades:3.15.5--h95f258a_1"
		cpus = 16
		memory = '15 GB'
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/spades_iontorrent", mode: 'copy', overwrite: true ]
		ext.args = "--iontorrent --careful --sc"
	}
	withName: tbprofiler_mergedb {
		memory = '10 GB'
		container = "https://depot.galaxyproject.org/singularity/tb-profiler:5.0.1--pyhdfd78af_1"
		publishDir = [ [ path: "${params.outdir}/${params.speciesDir}/tbprofiler_mergedb", mode: 'copy', overwrite: true, pattern: '*.{bcf,json}' ], [ path: "${params.outdir}/${params.speciesDir}/bam", mode: 'copy', overwrite: true, pattern: '*.bam' ] ]
		ext.args = "--external_db ${params.root}/assets/tbdb/converged_who_fohm_tbdb --calling_params '-q 15'"
	}
	withName: virulencefinder {
		cpus = 2
		container = "https://depot.galaxyproject.org/singularity/virulencefinder:2.0.4--hdfd78af_1"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/virulencefinder", mode: 'copy', overwrite: true ]
	}
}

manifest {
	homePage = 'https://github.com/genomic-medicine-sweden/jasen'
	description = 'Pipeline epitypes numerous bacterial species as well as identifies AMR and virulence genes'
	mainScript = 'main.nf'
	version = '0.6.0'
}
