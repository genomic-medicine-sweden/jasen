// Configuration for the Centre of Molecular Diagnostics (CMD) in Lund, Sweden //

params {
	root = "/fs1/pipelines/jasen_dev"
	// DATABASES //
	amrfinderDb = "${root}/assets/amrfinder_db/latest"
	resfinderDb = "${root}/assets/resfinder_db"
	pointfinderDb = "${root}/assets/pointfinder_db"
	serotypefinderDb = "${root}/assets/serotypefinder_db"
	virulencefinderDb = "${root}/assets/virulencefinder_db"
	mlstBlastDb = "${root}/assets/mlst_db/blast"
	pubMlstDb = "${root}/assets/mlst_db/pubmlst"
	krakenDb = "/fs1/resources/ref/micro/k2_standard_20240904"
	hostileIdx = "/fs1/resources/ref/micro/hostile/human-t2t-hla"
	// INPUT & OUTPUT //
	publishDir = ""
	publishDirMode = 'copy'
	publishDirOverwrite = true
	scratch = true
	containerDir = "/fs1/resources/containers"
	outdir = "/fs1/results_dev/jasen"
	bonsaiPrpSif = "${params.containerDir}/bonsai-prp.sif"
	args = ""
	prefix = ""
	bamDir = "bam"
	cdmDir = "cdm_input"
	vcfDir = "vcf"
	// PIPELINE OPTIONS //
	devMode = true
	cronCopy = false
	useHostile = true
	useKraken = true
	useSkesa = true // To use spades set useSkesa = false
	queue='grace-high'
}

singularity{
	enabled = true
	runOptions = '--bind /fs1/ --bind /fs2/ --bind /local/ --bind /mnt/beegfs/'
	cacheDir = "${params.containerDir}/"
}

profiles {
	dev {
		params.root = "/fs1/pipelines/jasen_dev"
		params.amrfinderDb = "${params.root}/assets/amrfinder_db/latest"
		params.resfinderDb = "${params.root}/assets/resfinder_db"
		params.pointfinderDb = "${params.root}/assets/pointfinder_db"
		params.serotypefinderDb = "${params.root}/assets/serotypefinder_db"
		params.virulencefinderDb = "${params.root}/assets/virulencefinder_db"
		params.mlstBlastDb = "${params.root}/assets/mlst_db/blast"
		params.pubMlstDb = "${params.root}/assets/mlst_db/pubmlst"
		params.outdir = "/fs1/results_dev/jasen"
		params.devMode = true
		params.cronCopy = false
		params.bonsaiPrpSif = "${params.containerDir}/bonsai-prp.sif"
		params.queue='grace-high'
	}

	production {
		params.root = "/fs1/pipelines/jasen"
		params.amrfinderDb = "${params.root}/assets/amrfinder_db/latest"
		params.resfinderDb = "${params.root}/assets/resfinder_db"
		params.pointfinderDb = "${params.root}/assets/pointfinder_db"
		params.serotypefinderDb = "${params.root}/assets/serotypefinder_db"
		params.virulencefinderDb = "${params.root}/assets/virulencefinder_db"
		params.mlstBlastDb = "${params.root}/assets/mlst_db/blast"
		params.pubMlstDb = "${params.root}/assets/mlst_db/pubmlst"
		params.outdir = "/fs1/results/jasen"
		params.devMode = false
		params.cronCopy = true
		params.bonsaiPrpSif = "docker://clinicalgenomicslund/bonsai-prp:0.11.4"
		params.queue='grace-high'
	}

	staphylococcus_aureus {
		params.species = "staphylococcus aureus"
		params.speciesDir = 'saureus'
		params.mlstScheme = 'saureus'
		params.symlinkDir = "/access/jasen/saureus/"
		params.referenceGenome = "${params.root}/assets/genomes/staphylococcus_aureus/GCF_000012045.1.fasta"
		params.referenceGenomeFai = "${params.root}/assets/genomes/staphylococcus_aureus/GCF_000012045.1.fasta.fai"
		params.referenceGenomeMmi = "${params.root}/assets/genomes/staphylococcus_aureus/GCF_000012045.1.mmi"
		params.referenceGenomeGff = "${params.root}/assets/genomes/staphylococcus_aureus/GCF_000012045.1.gff"
		params.chewbbacaDb = "${params.root}/assets/cgmlst/staphylococcus_aureus/alleles_rereffed"
		params.coreLociBed = "${params.root}/assets/cgmlst/staphylococcus_aureus/bed/GCF_000012045.1.bed"
		params.trainingFile = "${params.root}/assets/cgmlst/staphylococcus_aureus/alleles_rereffed/Staphylococcus_aureus.trn"
		params.useVirulenceDbs = ['s.aureus_hostimm', 's.aureus_exoenzyme', 's.aureus_toxin']
		params.useSerotypeDbs = []
		params.targetSampleSize = null
	}

	escherichia_coli {
		params.species = 'escherichia coli'
		params.speciesDir = 'ecoli'
		params.mlstScheme = 'ecoli_achtman_4'
		params.symlinkDir = "/access/jasen/ecoli/"
		params.referenceGenome = "${params.root}/assets/genomes/escherichia_coli/GCF_000005845.2.fasta"
		params.referenceGenomeFai = "${params.root}/assets/genomes/escherichia_coli/GCF_000005845.2.fasta.fai"
		params.referenceGenomeMmi = "${params.root}/assets/genomes/escherichia_coli/GCF_000005845.2.mmi"
		params.referenceGenomeGff = "${params.root}/assets/genomes/escherichia_coli/GCF_000005845.2.gff"
		// params.chewbbacaDb = "${params.root}/assets/cgmlst/escherichia_coli/alleles_rereffed"
		// params.coreLociBed = "${params.root}/assets/cgmlst/escherichia_coli/bed/GCF_000005845.2.bed"
		// params.trainingFile = "${params.root}/assets/cgmlst/escherichia_coli/alleles_rereffed/Escherichia_coli.trn"
		params.chewbbacaDb = "${params.root}/assets/wgmlst/escherichia_coli/alleles/ecoli_INNUENDO_wgMLST"
		params.shigapassDb = "${params.root}/assets/ShigaPass/SCRIPT/ShigaPass_DataBases"
		params.coreLociBed = "${params.root}/assets/wgmlst/escherichia_coli/bed/GCF_000005845.2.bed"
		params.trainingFile = "${params.root}/assets/wgmlst/escherichia_coli/alleles/ecoli_INNUENDO_wgMLST/Escherichia_coli.trn"
		params.useVirulenceDbs = ['virulence_ecoli', 'stx']
		params.useSerotypeDbs = ['O_type', 'H_type']
		params.targetSampleSize = null
	}

	klebsiella_pneumoniae {
		params.species = 'klebsiella pneumoniae'
		params.speciesDir = 'kpneumoniae'
		params.mlstScheme = 'klebsiella'
		params.symlinkDir = "/access/jasen/kpneumoniae/"
		params.referenceGenome = "${params.root}/assets/genomes/klebsiella_pneumoniae/GCF_000240185.1.fasta"
		params.referenceGenomeFai = "${params.root}/assets/genomes/klebsiella_pneumoniae/GCF_000240185.1.fasta.fai"
		params.referenceGenomeMmi = "${params.root}/assets/genomes/klebsiella_pneumoniae/GCF_000240185.1.mmi"
		params.referenceGenomeGff = "${params.root}/assets/genomes/klebsiella_pneumoniae/GCF_000240185.1.gff"
		params.chewbbacaDb = "${params.root}/assets/cgmlst/klebsiella_pneumoniae/alleles_rereffed"
		params.coreLociBed = "${params.root}/assets/cgmlst/klebsiella_pneumoniae/bed/GCF_000240185.1.bed"
		params.trainingFile = "${params.root}/assets/cgmlst/klebsiella_pneumoniae/alleles_rereffed/Klebsiella_pneumoniae.trn"
		params.useVirulenceDbs = []
		params.useSerotypeDbs = ['O_type', 'H_type']
	}

	mycobacterium_tuberculosis {
		params.species = 'mycobacterium tuberculosis'
		params.speciesDir = 'mtuberculosis'
		params.resistantLociName = 'resistance_loci'
		params.gradingLociName = 'grading_loci'
		params.symlinkDir = "/access/jasen/mtuberculosis/"
		params.referenceGenome = "${params.root}/assets/genomes/mycobacterium_tuberculosis/GCF_000195955.2.fasta"
		params.referenceGenomeFai = "${params.root}/assets/genomes/mycobacterium_tuberculosis/GCF_000195955.2.fasta.fai"
		params.referenceGenomeMmi = "${params.root}/assets/genomes/mycobacterium_tuberculosis/GCF_000195955.2.mmi"
		params.referenceGenomeGff = "${params.root}/assets/genomes/mycobacterium_tuberculosis/GCF_000195955.2.gff"
		params.coreLociBed = "${params.root}/assets/cgmlst/mycobacterium_tuberculosis/bed/GCF_000195955.2.bed"
		params.tbGradingRulesBed = "${params.root}/assets/tb_info/bed/tb_grading_rules.bed"
		params.tbdbBed = "${params.root}/assets/tbdb/converged_who_fohm_tbdb.bed.gz"
		params.tbdbBedIdx = "${params.tbdbBed}.tbi"
		params.targetSampleSize = null
	}

	streptococcus_pyogenes {
		params.species = 'streptococcus pyogenes'
		params.speciesDir = 'spyogenes'
		params.mlstScheme = 'spyogenes'
		params.symlinkDir = "/access/jasen/spyogenes/"
		params.referenceGenome = "${params.root}/assets/genomes/streptococcus_pyogenes/GCF_005164585.1.fasta"
		params.referenceGenomeFai = "${params.root}/assets/genomes/streptococcus_pyogenes/GCF_005164585.1.fasta.fai"
		params.referenceGenomeMmi = "${params.root}/assets/genomes/streptococcus_pyogenes/GCF_005164585.1.mmi"
		params.referenceGenomeGff = "${params.root}/assets/genomes/streptococcus_pyogenes/GCF_005164585.1.gff"
		params.chewbbacaDb = "${params.root}/assets/cgmlst/streptococcus_pyogenes/alleles_rereffed"
		params.coreLociBed = "${params.root}/assets/cgmlst/streptococcus_pyogenes/bed/GCF_005164585.1.bed"
		params.trainingFile = "${params.root}/assets/cgmlst/streptococcus_pyogenes/alleles_rereffed/Streptococcus_pyogenes.trn"
		params.useVirulenceDbs = []
		params.useSerotypeDbs = []
		params.targetSampleSize = null
	}

	streptococcus {
		params.species = 'streptococcus'
		params.speciesDir = 'streptococcus'
		params.mlstScheme = null
		params.referenceGenome = null
		params.referenceGenomeFai = null
		params.referenceGenomeMmi = null
		params.referenceGenomeGff = null
		params.chewbbacaDb = "${params.root}/assets/cgmlst/streptococcus/alleles_rereffed"
		params.shigapassDb = null
		params.coreLociBed = null
		params.trainingFile = null
		params.useVirulenceDbs = []
		params.useSerotypeDbs = []
		params.targetSampleSize = null
	}
}

process {
	executor='slurm'
	queue=params.queue
	time=1.h
	memory='1.GB'
	cpus=2

	withName: add_igv_track {
		container = "${params.bonsaiPrpSif}"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/analysis_result", mode: 'copy', overwrite: true ]
		ext.when = { params.species == "mycobacterium tuberculosis" }
	}
	withName: amrfinderplus {
		container = "https://depot.galaxyproject.org/singularity/ncbi-amrfinderplus:3.11.11--h6e70893_0"
		cpus = 4
		memory = '10.GB'
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/amrfinderplus", mode: 'copy', overwrite: true ]
		ext.args = "--plus"
		ext.when = { params.species != "mycobacterium tuberculosis" }
	}
	withName: annotate_delly {
		container = "${params.bonsaiPrpSif}"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/${params.vcfDir}", mode: 'copy', overwrite: true ]
		ext.when = { params.species == "mycobacterium tuberculosis" }
	}
	withName: assembly_trim_clean {
		container = "https://depot.galaxyproject.org/singularity/perl-json:4.10--pl5321hdfd78af_0"
		cpus = 4
		memory = '10.GB'
		ext.args = "--min_quality 23 --bases_to_trim 400 --min_length 100 -p 1 --nosingletons"
	}
	withName: bracken {
		container = "https://depot.galaxyproject.org/singularity/bracken:2.8--py39hc16433a_0"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/kraken", mode: 'copy', overwrite: true ]
		ext.args = "-r 150"
		ext.when = { params.useKraken }
	}
	withName: bwa_index {
		container = "https://depot.galaxyproject.org/singularity/bwakit:0.7.17.dev1--hdfd78af_1"
		ext.args = "-M"
		ext.when = { params.species != "mycobacterium tuberculosis" }
	}
	withName: bwa_mem_assembly {
		container = "https://depot.galaxyproject.org/singularity/bwakit:0.7.17.dev1--hdfd78af_1"
		cpus = 16
		memory = '20.GB'
		ext.args = "-M"
		ext.when = { params.species != "mycobacterium tuberculosis" }
	}
	withName: bwa_mem_ref {
		container = "https://depot.galaxyproject.org/singularity/bwakit:0.7.17.dev1--hdfd78af_1"
		cpus = 16
		memory = '20.GB'
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/${params.bamDir}", mode: 'copy', overwrite: true ]
		ext.args = "-M"
		ext.when = { params.referenceGenome && params.species != "mycobacterium tuberculosis" }
	}
	withName: chewbbaca_allelecall {
		cpus = 16
		memory = '12.GB'
		container = "https://depot.galaxyproject.org/singularity/chewbbaca:3.3.2--pyhdfd78af_0"
		ext.when = { params.species != "mycobacterium tuberculosis" }
	}
	withName: chewbbaca_create_batch_list {
		ext.when = { params.species != "mycobacterium tuberculosis" }
	}
	withName: chewbbaca_split_results {
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/chewbbaca", mode: 'copy', overwrite: true ]
		ext.when = { params.species != "mycobacterium tuberculosis" }
	}
	withName: create_analysis_result {
		container = "${params.bonsaiPrpSif}"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/analysis_result", mode: 'copy', overwrite: true ]
	}
	withName: create_cdm_input {
		container = "${params.bonsaiPrpSif}"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/${params.cdmDir}", mode: 'copy', overwrite: true ]
	}
	withName: create_yaml {
		container = "${params.bonsaiPrpSif}"
		publishDir = [ [ path: "${params.outdir}/${params.speciesDir}/analysis_yaml", mode: 'copy', overwrite: true ] ] + (params.cronCopy ? [ [ path: "/fs1/results/cron/jasen/${params.speciesDir}", mode: 'copy', overwrite: true ] ] : [])
		ext.args_prp = {"${params.outdir}/${params.speciesDir}/analysis_result"}
		ext.args_sourmash = {"/access/jasen/${params.speciesDir}/sourmash"}
		ext.args_ska = {"/access/jasen/${params.speciesDir}/ska"}
	}
	withName: emmtyper {
		container = "https://depot.galaxyproject.org/singularity/emmtyper:0.2.0--py_0"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/emmtyper", mode: 'copy', overwrite: true ]
		ext.when = { params.species in ["streptococcus", "streptococcus pyogenes"] }
	}
	withName: export_to_cdm {
		publishDir = [ [ path: "${params.outdir}/${params.speciesDir}/qc", mode: 'copy', overwrite: true ] ] + (params.cronCopy ? [ [ path: "/fs1/results/cron/qc", mode: 'copy', overwrite: true ] ] : [])
	}
	withName: fastqc {
		cpus = 4
		memory = '2.GB'
		container = "https://depot.galaxyproject.org/singularity/fastqc:0.12.1--hdfd78af_0"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/fastqc", mode: 'copy', overwrite: true ]
		ext.args = "--threads 4"
	}
	withName: flye {
		container = "https://depot.galaxyproject.org/singularity/flye:2.9.3--py39hd65a603_0"
		cpus = 20
		memory = '32.GB'
		time=2.h
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/flye", mode: 'copy', overwrite: true ]
		ext.args = "--threads 40 --genome-size 2.8m --asm-coverage 50"
		ext.seqmethod = "--nano-hq"
	}
	withName: freebayes {
		container = "https://depot.galaxyproject.org/singularity/freebayes:1.3.6--hbfe0e7f_2"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/${params.vcfDir}", mode: 'copy', overwrite: true ]
		ext.args = "-C 2 -F 0.2 --pooled-continuous"
		ext.when = { params.species != "mycobacterium tuberculosis" }
	}
	withName: hostile {
		cpus = 2
		memory = '2.GB'
		container = "https://depot.galaxyproject.org/singularity/hostile:2.0.0--pyhdfd78af_0"
		ext.args = "--airplane --index ${params.hostileIdx}"
		ext.when = { params.useHostile }
	}
	withName: kraken {
		memory = '100.GB'
		cpus = 16
		container = "https://depot.galaxyproject.org/singularity/kraken2:2.1.2--pl5321h9f5acd7_3"
		ext.args = "--gzip-compressed"
		ext.when = { params.useKraken }
	}
	withName: mask_polymorph_assembly {
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/mask", mode: 'copy', overwrite: true ]
		ext.when = { params.species != "mycobacterium tuberculosis" }
	}
	withName: medaka {
		container = "https://depot.galaxyproject.org/singularity/medaka:1.11.3--py39h05d5c5e_0"
		cpus = 20
		memory = '32.GB'
		time=2.h
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/medaka", mode: 'copy', overwrite: true ]
		ext.args = "-t 40 --bacteria"
	}
	withName: minimap_ref {
		container = "https://depot.galaxyproject.org/singularity/minimap2:2.28--h577a1d6_4"
		ext.args = "-a -x map-ont"
	}
	withName: mlst {
		container = "https://depot.galaxyproject.org/singularity/mlst:2.23.0--hdfd78af_1"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/mlst", mode: 'copy', overwrite: true ]
		ext.when = { params.species != "mycobacterium tuberculosis" }
	}
	withName: mykrobe {
		memory = '4.GB'
		container = "https://depot.galaxyproject.org/singularity/mykrobe:0.12.2--py39h70e0db4_0"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/mykrobe", mode: 'copy', overwrite: true ]
		ext.args = "--species tb --format csv"
		ext.when = { params.species == "mycobacterium tuberculosis" }
	}
	withName: nanoplot {
		container = "https://depot.galaxyproject.org/singularity/nanoplot:1.43.0--pyhdfd78af_1"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/nanoplot", mode: 'copy', overwrite: true ]
		ext.args = "--threads 8"
	}
	withName: post_align_qc {
		memory = '2.GB'
		container = "${params.bonsaiPrpSif}"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/postalignqc", mode: 'copy', overwrite: true ]
		ext.when = { params.species != "streptococcus" }
	}
	withName: quast {
		container = "https://depot.galaxyproject.org/singularity/quast:5.2.0--py310pl5321hc8f18ef_2"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/quast", mode: 'copy', overwrite: true ]
	}
	withName: resfinder {
		container = "https://depot.galaxyproject.org/singularity/resfinder:4.4.2--pyhdfd78af_1"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/resfinder", mode: 'copy', overwrite: true ]
		ext.nanopore_args = "--nanopore --ignore_indels --ignore_stop_codons"
		ext.when = { params.species != "mycobacterium tuberculosis" }
	}
	withName: samtools_coverage {
		container = "https://depot.galaxyproject.org/singularity/samtools:1.17--h00cdaf9_0"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/postmapqc", mode: 'copy', overwrite: true ]
	}
	withName: samtools_index_assembly {
		cpus = 16
		memory = '2.GB'
		container = "https://depot.galaxyproject.org/singularity/samtools:1.17--h00cdaf9_0"
		ext.when = { params.species != "mycobacterium tuberculosis" }
	}
	withName: samtools_index_ref {
		cpus = 16
		memory = '2.GB'
		container = "https://depot.galaxyproject.org/singularity/samtools:1.17--h00cdaf9_0"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/${params.bamDir}", mode: 'copy', overwrite: true ]
		ext.when = { params.referenceGenome && params.species != "mycobacterium tuberculosis" }
	}
	withName: samtools_sort {
		cpus = 16
		memory = '20.GB'
		container = "https://depot.galaxyproject.org/singularity/samtools:1.17--h00cdaf9_0"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/${params.bamDir}", mode: 'copy', overwrite: true ]
	}
	withName: save_analysis_metadata {
		container = "${params.bonsaiPrpSif}"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/analysis_metadata", mode: 'copy', overwrite: true ]
	}
	withName: sccmec {
		cpus = 2
		memory = '2.GB'
		container = "https://depot.galaxyproject.org/singularity/sccmec:1.2.0--hdfd78af_0"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/sccmec", mode: 'copy', overwrite: true ]
		ext.when = { params.species == "staphylococcus aureus" }
	}
	withName: seqtk_sample {
		container = "https://depot.galaxyproject.org/singularity/seqtk:1.4--he4a0461_2"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/seqtk_sample", mode: 'copy', overwrite: true ]
		ext.when = { params.targetSampleSize ? true : false }
	}
	withName: serotypefinder {
		cpus = 2
		container = "https://depot.galaxyproject.org/singularity/serotypefinder:2.0.2--py312hdfd78af_1"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/serotypefinder", mode: 'copy', overwrite: true ]
		ext.when = { (params.species in ["escherichia coli", "klebsiella pneumoniae"]) }
	}
	withName: shigapass {
		cpus = 2
		container = "https://depot.galaxyproject.org/singularity/shigapass:1.5.0--hdfd78af_0"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/shigapass", mode: 'copy', overwrite: true ]
		ext.when = { params.species == "escherichia coli" }
	}
	withName: ska_build {
		container = "https://depot.galaxyproject.org/singularity/ska2:0.3.10--h4349ce8_0"
		cpus = 2
		memory = '10.GB'
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/ska", mode: 'copy', overwrite: true ]
		ext.args = "-k 31 --threads 1"
	}
	withName: skesa {
		container = "https://depot.galaxyproject.org/singularity/skesa:2.4.0--he1c1bb9_0"
		cpus = 16
		memory = '32.GB'
		time=2.h
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/skesa", mode: 'copy', overwrite: true ]
		ext.args = "--cores 16 --memory 32"
		ext.when = { params.useSkesa }
	}
	withName: snippy {
		memory = '32.GB'
		container = "https://depot.galaxyproject.org/singularity/snippy:4.6.0--hdfd78af_2"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/snippy", mode: 'copy', overwrite: true ]
		ext.when = { params.species == "mycobacterium tuberculosis" }
	}
	withName: sourmash {
		container = "https://depot.galaxyproject.org/singularity/sourmash:4.8.2--hdfd78af_0"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/sourmash", mode: 'copy', overwrite: true ]
		ext.args = "-p k=31,k=51,scaled=1000"
	}
	withName: spades_illumina {
		container = "https://depot.galaxyproject.org/singularity/spades:3.15.5--h95f258a_1"
		cpus = 16
		memory = '15.GB'
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/spades_illumina", mode: 'copy', overwrite: true ]
		ext.args = "--isolate"
		ext.when = { !params.useSkesa }
	}
	withName: spades_iontorrent {
		container = "https://depot.galaxyproject.org/singularity/spades:3.15.5--h95f258a_1"
		cpus = 16
		memory = '15.GB'
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/spades_iontorrent", mode: 'copy', overwrite: true ]
		ext.args = "--iontorrent --careful --sc"
	}
	withName: spatyper {
		cpus = 2
		memory = '2.GB'
		container = "https://depot.galaxyproject.org/singularity/spatyper:0.3.3--pyhdfd78af_3"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/spatyper", mode: 'copy', overwrite: true ]
		ext.when = { params.species == "staphylococcus aureus" }
	}
	withName: tbprofiler_mergedb {
		cpus = 16
		memory = '12.GB'
		container = "https://depot.galaxyproject.org/singularity/tb-profiler:6.3.0--pyhdfd78af_0"
		publishDir = [ [ path: "${params.outdir}/${params.speciesDir}/tbprofiler_mergedb", mode: 'copy', overwrite: true, pattern: '*.json' ], [ path: "${params.outdir}/${params.speciesDir}/${params.vcfDir}", mode: 'copy', overwrite: true, pattern: '*.{vcf.gz}' ], [ path: "${params.outdir}/${params.speciesDir}/${params.bamDir}", mode: 'copy', overwrite: true, pattern: '*.bam*' ] ]
		ext.args = "--external_db ${params.root}/assets/tbdb/converged_who_fohm_tbdb --calling_params '-q 15'"
		ext.when = { params.species == "mycobacterium tuberculosis" }
	}
	withName: virulencefinder {
		cpus = 2
		container = "https://depot.galaxyproject.org/singularity/virulencefinder:2.0.4--hdfd78af_1"
		publishDir = [ path: "${params.outdir}/${params.speciesDir}/virulencefinder", mode: 'copy', overwrite: true ]
		ext.when = { params.species != "mycobacterium tuberculosis" }
	}
	
}

manifest {
	homePage = 'https://github.com/genomic-medicine-sweden/jasen'
	description = 'Pipeline epitypes numerous bacterial species as well as identifies AMR and virulence genes'
	mainScript = 'main.nf'
	version = '1.0.0'
}
